
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00001010  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800106  00800106  0000114a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000018a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e4  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a25  00000000  00000000  00003309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adb  00000000  00000000  0000440b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 30       	cpi	r26, 0x0A	; 10
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <main>
      8a:	0c 94 06 08 	jmp	0x100c	; 0x100c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vButton_init>:
#include "DIO.h" 
 
 void vButton_init(unsigned char port,unsigned char pin)
{
	vDIO_SET_BIT_DIR(port,pin,0);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	
}
      98:	08 95       	ret

0000009a <u8Button_read>:
unsigned char u8Button_read(unsigned char port,unsigned char pin)
{
	
	return u8DIO_READ_BIT(port,pin);
      9a:	0e 94 bf 01 	call	0x37e	; 0x37e <u8DIO_READ_BIT>
}
      9e:	08 95       	ret

000000a0 <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
      a0:	84 34       	cpi	r24, 0x44	; 68
      a2:	09 f4       	brne	.+2      	; 0xa6 <vDIO_SET_BIT_DIR+0x6>
      a4:	71 c0       	rjmp	.+226    	; 0x188 <vDIO_SET_BIT_DIR+0xe8>
      a6:	85 34       	cpi	r24, 0x45	; 69
      a8:	48 f4       	brcc	.+18     	; 0xbc <vDIO_SET_BIT_DIR+0x1c>
      aa:	82 34       	cpi	r24, 0x42	; 66
      ac:	99 f1       	breq	.+102    	; 0x114 <vDIO_SET_BIT_DIR+0x74>
      ae:	83 34       	cpi	r24, 0x43	; 67
      b0:	08 f0       	brcs	.+2      	; 0xb4 <vDIO_SET_BIT_DIR+0x14>
      b2:	4d c0       	rjmp	.+154    	; 0x14e <vDIO_SET_BIT_DIR+0xae>
      b4:	81 34       	cpi	r24, 0x41	; 65
      b6:	09 f0       	breq	.+2      	; 0xba <vDIO_SET_BIT_DIR+0x1a>
      b8:	83 c0       	rjmp	.+262    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
      ba:	0f c0       	rjmp	.+30     	; 0xda <vDIO_SET_BIT_DIR+0x3a>
      bc:	82 36       	cpi	r24, 0x62	; 98
      be:	51 f1       	breq	.+84     	; 0x114 <vDIO_SET_BIT_DIR+0x74>
      c0:	83 36       	cpi	r24, 0x63	; 99
      c2:	20 f4       	brcc	.+8      	; 0xcc <vDIO_SET_BIT_DIR+0x2c>
      c4:	81 36       	cpi	r24, 0x61	; 97
      c6:	09 f0       	breq	.+2      	; 0xca <vDIO_SET_BIT_DIR+0x2a>
      c8:	7b c0       	rjmp	.+246    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
      ca:	07 c0       	rjmp	.+14     	; 0xda <vDIO_SET_BIT_DIR+0x3a>
      cc:	83 36       	cpi	r24, 0x63	; 99
      ce:	09 f4       	brne	.+2      	; 0xd2 <vDIO_SET_BIT_DIR+0x32>
      d0:	3e c0       	rjmp	.+124    	; 0x14e <vDIO_SET_BIT_DIR+0xae>
      d2:	84 36       	cpi	r24, 0x64	; 100
      d4:	09 f0       	breq	.+2      	; 0xd8 <vDIO_SET_BIT_DIR+0x38>
      d6:	74 c0       	rjmp	.+232    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
      d8:	57 c0       	rjmp	.+174    	; 0x188 <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
      da:	41 30       	cpi	r20, 0x01	; 1
      dc:	69 f4       	brne	.+26     	; 0xf8 <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
      de:	2a b3       	in	r18, 0x1a	; 26
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	ac 01       	movw	r20, r24
      e6:	02 c0       	rjmp	.+4      	; 0xec <vDIO_SET_BIT_DIR+0x4c>
      e8:	44 0f       	add	r20, r20
      ea:	55 1f       	adc	r21, r21
      ec:	6a 95       	dec	r22
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <vDIO_SET_BIT_DIR+0x48>
      f0:	ba 01       	movw	r22, r20
      f2:	62 2b       	or	r22, r18
      f4:	6a bb       	out	0x1a, r22	; 26
      f6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
      f8:	2a b3       	in	r18, 0x1a	; 26
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	ac 01       	movw	r20, r24
     100:	02 c0       	rjmp	.+4      	; 0x106 <vDIO_SET_BIT_DIR+0x66>
     102:	44 0f       	add	r20, r20
     104:	55 1f       	adc	r21, r21
     106:	6a 95       	dec	r22
     108:	e2 f7       	brpl	.-8      	; 0x102 <vDIO_SET_BIT_DIR+0x62>
     10a:	ba 01       	movw	r22, r20
     10c:	60 95       	com	r22
     10e:	62 23       	and	r22, r18
     110:	6a bb       	out	0x1a, r22	; 26
     112:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
     114:	41 30       	cpi	r20, 0x01	; 1
     116:	69 f4       	brne	.+26     	; 0x132 <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
     118:	27 b3       	in	r18, 0x17	; 23
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	ac 01       	movw	r20, r24
     120:	02 c0       	rjmp	.+4      	; 0x126 <vDIO_SET_BIT_DIR+0x86>
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	6a 95       	dec	r22
     128:	e2 f7       	brpl	.-8      	; 0x122 <vDIO_SET_BIT_DIR+0x82>
     12a:	ba 01       	movw	r22, r20
     12c:	62 2b       	or	r22, r18
     12e:	67 bb       	out	0x17, r22	; 23
     130:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     132:	27 b3       	in	r18, 0x17	; 23
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	ac 01       	movw	r20, r24
     13a:	02 c0       	rjmp	.+4      	; 0x140 <vDIO_SET_BIT_DIR+0xa0>
     13c:	44 0f       	add	r20, r20
     13e:	55 1f       	adc	r21, r21
     140:	6a 95       	dec	r22
     142:	e2 f7       	brpl	.-8      	; 0x13c <vDIO_SET_BIT_DIR+0x9c>
     144:	ba 01       	movw	r22, r20
     146:	60 95       	com	r22
     148:	62 23       	and	r22, r18
     14a:	67 bb       	out	0x17, r22	; 23
     14c:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
     14e:	41 30       	cpi	r20, 0x01	; 1
     150:	69 f4       	brne	.+26     	; 0x16c <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
     152:	24 b3       	in	r18, 0x14	; 20
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	ac 01       	movw	r20, r24
     15a:	02 c0       	rjmp	.+4      	; 0x160 <vDIO_SET_BIT_DIR+0xc0>
     15c:	44 0f       	add	r20, r20
     15e:	55 1f       	adc	r21, r21
     160:	6a 95       	dec	r22
     162:	e2 f7       	brpl	.-8      	; 0x15c <vDIO_SET_BIT_DIR+0xbc>
     164:	ba 01       	movw	r22, r20
     166:	62 2b       	or	r22, r18
     168:	64 bb       	out	0x14, r22	; 20
     16a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     16c:	24 b3       	in	r18, 0x14	; 20
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	ac 01       	movw	r20, r24
     174:	02 c0       	rjmp	.+4      	; 0x17a <vDIO_SET_BIT_DIR+0xda>
     176:	44 0f       	add	r20, r20
     178:	55 1f       	adc	r21, r21
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <vDIO_SET_BIT_DIR+0xd6>
     17e:	ba 01       	movw	r22, r20
     180:	60 95       	com	r22
     182:	62 23       	and	r22, r18
     184:	64 bb       	out	0x14, r22	; 20
     186:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
     188:	41 30       	cpi	r20, 0x01	; 1
     18a:	69 f4       	brne	.+26     	; 0x1a6 <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
     18c:	21 b3       	in	r18, 0x11	; 17
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	ac 01       	movw	r20, r24
     194:	02 c0       	rjmp	.+4      	; 0x19a <vDIO_SET_BIT_DIR+0xfa>
     196:	44 0f       	add	r20, r20
     198:	55 1f       	adc	r21, r21
     19a:	6a 95       	dec	r22
     19c:	e2 f7       	brpl	.-8      	; 0x196 <vDIO_SET_BIT_DIR+0xf6>
     19e:	ba 01       	movw	r22, r20
     1a0:	62 2b       	or	r22, r18
     1a2:	61 bb       	out	0x11, r22	; 17
     1a4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     1a6:	21 b3       	in	r18, 0x11	; 17
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	ac 01       	movw	r20, r24
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <vDIO_SET_BIT_DIR+0x114>
     1b0:	44 0f       	add	r20, r20
     1b2:	55 1f       	adc	r21, r21
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <vDIO_SET_BIT_DIR+0x110>
     1b8:	ba 01       	movw	r22, r20
     1ba:	60 95       	com	r22
     1bc:	62 23       	and	r22, r18
     1be:	61 bb       	out	0x11, r22	; 17
     1c0:	08 95       	ret

000001c2 <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     1c2:	84 34       	cpi	r24, 0x44	; 68
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <vDIO_WRITE_BIT+0x6>
     1c6:	71 c0       	rjmp	.+226    	; 0x2aa <vDIO_WRITE_BIT+0xe8>
     1c8:	85 34       	cpi	r24, 0x45	; 69
     1ca:	48 f4       	brcc	.+18     	; 0x1de <vDIO_WRITE_BIT+0x1c>
     1cc:	82 34       	cpi	r24, 0x42	; 66
     1ce:	99 f1       	breq	.+102    	; 0x236 <vDIO_WRITE_BIT+0x74>
     1d0:	83 34       	cpi	r24, 0x43	; 67
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <vDIO_WRITE_BIT+0x14>
     1d4:	4d c0       	rjmp	.+154    	; 0x270 <vDIO_WRITE_BIT+0xae>
     1d6:	81 34       	cpi	r24, 0x41	; 65
     1d8:	09 f0       	breq	.+2      	; 0x1dc <vDIO_WRITE_BIT+0x1a>
     1da:	83 c0       	rjmp	.+262    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
     1dc:	0f c0       	rjmp	.+30     	; 0x1fc <vDIO_WRITE_BIT+0x3a>
     1de:	82 36       	cpi	r24, 0x62	; 98
     1e0:	51 f1       	breq	.+84     	; 0x236 <vDIO_WRITE_BIT+0x74>
     1e2:	83 36       	cpi	r24, 0x63	; 99
     1e4:	20 f4       	brcc	.+8      	; 0x1ee <vDIO_WRITE_BIT+0x2c>
     1e6:	81 36       	cpi	r24, 0x61	; 97
     1e8:	09 f0       	breq	.+2      	; 0x1ec <vDIO_WRITE_BIT+0x2a>
     1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
     1ec:	07 c0       	rjmp	.+14     	; 0x1fc <vDIO_WRITE_BIT+0x3a>
     1ee:	83 36       	cpi	r24, 0x63	; 99
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <vDIO_WRITE_BIT+0x32>
     1f2:	3e c0       	rjmp	.+124    	; 0x270 <vDIO_WRITE_BIT+0xae>
     1f4:	84 36       	cpi	r24, 0x64	; 100
     1f6:	09 f0       	breq	.+2      	; 0x1fa <vDIO_WRITE_BIT+0x38>
     1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
     1fa:	57 c0       	rjmp	.+174    	; 0x2aa <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
     1fc:	41 30       	cpi	r20, 0x01	; 1
     1fe:	69 f4       	brne	.+26     	; 0x21a <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
     200:	2b b3       	in	r18, 0x1b	; 27
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	ac 01       	movw	r20, r24
     208:	02 c0       	rjmp	.+4      	; 0x20e <vDIO_WRITE_BIT+0x4c>
     20a:	44 0f       	add	r20, r20
     20c:	55 1f       	adc	r21, r21
     20e:	6a 95       	dec	r22
     210:	e2 f7       	brpl	.-8      	; 0x20a <vDIO_WRITE_BIT+0x48>
     212:	ba 01       	movw	r22, r20
     214:	62 2b       	or	r22, r18
     216:	6b bb       	out	0x1b, r22	; 27
     218:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
     21a:	2b b3       	in	r18, 0x1b	; 27
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	ac 01       	movw	r20, r24
     222:	02 c0       	rjmp	.+4      	; 0x228 <vDIO_WRITE_BIT+0x66>
     224:	44 0f       	add	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	e2 f7       	brpl	.-8      	; 0x224 <vDIO_WRITE_BIT+0x62>
     22c:	ba 01       	movw	r22, r20
     22e:	60 95       	com	r22
     230:	62 23       	and	r22, r18
     232:	6b bb       	out	0x1b, r22	; 27
     234:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
     236:	41 30       	cpi	r20, 0x01	; 1
     238:	69 f4       	brne	.+26     	; 0x254 <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
     23a:	28 b3       	in	r18, 0x18	; 24
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	ac 01       	movw	r20, r24
     242:	02 c0       	rjmp	.+4      	; 0x248 <vDIO_WRITE_BIT+0x86>
     244:	44 0f       	add	r20, r20
     246:	55 1f       	adc	r21, r21
     248:	6a 95       	dec	r22
     24a:	e2 f7       	brpl	.-8      	; 0x244 <vDIO_WRITE_BIT+0x82>
     24c:	ba 01       	movw	r22, r20
     24e:	62 2b       	or	r22, r18
     250:	68 bb       	out	0x18, r22	; 24
     252:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
     254:	28 b3       	in	r18, 0x18	; 24
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	ac 01       	movw	r20, r24
     25c:	02 c0       	rjmp	.+4      	; 0x262 <vDIO_WRITE_BIT+0xa0>
     25e:	44 0f       	add	r20, r20
     260:	55 1f       	adc	r21, r21
     262:	6a 95       	dec	r22
     264:	e2 f7       	brpl	.-8      	; 0x25e <vDIO_WRITE_BIT+0x9c>
     266:	ba 01       	movw	r22, r20
     268:	60 95       	com	r22
     26a:	62 23       	and	r22, r18
     26c:	68 bb       	out	0x18, r22	; 24
     26e:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
     270:	41 30       	cpi	r20, 0x01	; 1
     272:	69 f4       	brne	.+26     	; 0x28e <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
     274:	25 b3       	in	r18, 0x15	; 21
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	ac 01       	movw	r20, r24
     27c:	02 c0       	rjmp	.+4      	; 0x282 <vDIO_WRITE_BIT+0xc0>
     27e:	44 0f       	add	r20, r20
     280:	55 1f       	adc	r21, r21
     282:	6a 95       	dec	r22
     284:	e2 f7       	brpl	.-8      	; 0x27e <vDIO_WRITE_BIT+0xbc>
     286:	ba 01       	movw	r22, r20
     288:	62 2b       	or	r22, r18
     28a:	65 bb       	out	0x15, r22	; 21
     28c:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
     28e:	25 b3       	in	r18, 0x15	; 21
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	ac 01       	movw	r20, r24
     296:	02 c0       	rjmp	.+4      	; 0x29c <vDIO_WRITE_BIT+0xda>
     298:	44 0f       	add	r20, r20
     29a:	55 1f       	adc	r21, r21
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <vDIO_WRITE_BIT+0xd6>
     2a0:	ba 01       	movw	r22, r20
     2a2:	60 95       	com	r22
     2a4:	62 23       	and	r22, r18
     2a6:	65 bb       	out	0x15, r22	; 21
     2a8:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
     2aa:	41 30       	cpi	r20, 0x01	; 1
     2ac:	69 f4       	brne	.+26     	; 0x2c8 <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
     2ae:	22 b3       	in	r18, 0x12	; 18
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	ac 01       	movw	r20, r24
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <vDIO_WRITE_BIT+0xfa>
     2b8:	44 0f       	add	r20, r20
     2ba:	55 1f       	adc	r21, r21
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <vDIO_WRITE_BIT+0xf6>
     2c0:	ba 01       	movw	r22, r20
     2c2:	62 2b       	or	r22, r18
     2c4:	62 bb       	out	0x12, r22	; 18
     2c6:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
     2c8:	22 b3       	in	r18, 0x12	; 18
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	ac 01       	movw	r20, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <vDIO_WRITE_BIT+0x114>
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	6a 95       	dec	r22
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <vDIO_WRITE_BIT+0x110>
     2da:	ba 01       	movw	r22, r20
     2dc:	60 95       	com	r22
     2de:	62 23       	and	r22, r18
     2e0:	62 bb       	out	0x12, r22	; 18
     2e2:	08 95       	ret

000002e4 <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
     2e4:	84 34       	cpi	r24, 0x44	; 68
     2e6:	09 f4       	brne	.+2      	; 0x2ea <vDIO_TOGGLE_BIT+0x6>
     2e8:	3d c0       	rjmp	.+122    	; 0x364 <vDIO_TOGGLE_BIT+0x80>
     2ea:	85 34       	cpi	r24, 0x45	; 69
     2ec:	40 f4       	brcc	.+16     	; 0x2fe <vDIO_TOGGLE_BIT+0x1a>
     2ee:	82 34       	cpi	r24, 0x42	; 66
     2f0:	f9 f0       	breq	.+62     	; 0x330 <vDIO_TOGGLE_BIT+0x4c>
     2f2:	83 34       	cpi	r24, 0x43	; 67
     2f4:	50 f5       	brcc	.+84     	; 0x34a <vDIO_TOGGLE_BIT+0x66>
     2f6:	81 34       	cpi	r24, 0x41	; 65
     2f8:	09 f0       	breq	.+2      	; 0x2fc <vDIO_TOGGLE_BIT+0x18>
     2fa:	40 c0       	rjmp	.+128    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
     2fc:	0c c0       	rjmp	.+24     	; 0x316 <vDIO_TOGGLE_BIT+0x32>
     2fe:	82 36       	cpi	r24, 0x62	; 98
     300:	b9 f0       	breq	.+46     	; 0x330 <vDIO_TOGGLE_BIT+0x4c>
     302:	83 36       	cpi	r24, 0x63	; 99
     304:	18 f4       	brcc	.+6      	; 0x30c <vDIO_TOGGLE_BIT+0x28>
     306:	81 36       	cpi	r24, 0x61	; 97
     308:	c9 f5       	brne	.+114    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
     30a:	05 c0       	rjmp	.+10     	; 0x316 <vDIO_TOGGLE_BIT+0x32>
     30c:	83 36       	cpi	r24, 0x63	; 99
     30e:	e9 f0       	breq	.+58     	; 0x34a <vDIO_TOGGLE_BIT+0x66>
     310:	84 36       	cpi	r24, 0x64	; 100
     312:	a1 f5       	brne	.+104    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
     314:	27 c0       	rjmp	.+78     	; 0x364 <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
     316:	2b b3       	in	r18, 0x1b	; 27
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	ac 01       	movw	r20, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <vDIO_TOGGLE_BIT+0x40>
     320:	44 0f       	add	r20, r20
     322:	55 1f       	adc	r21, r21
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <vDIO_TOGGLE_BIT+0x3c>
     328:	ba 01       	movw	r22, r20
     32a:	62 27       	eor	r22, r18
     32c:	6b bb       	out	0x1b, r22	; 27
	break;
     32e:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
     330:	28 b3       	in	r18, 0x18	; 24
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	ac 01       	movw	r20, r24
     338:	02 c0       	rjmp	.+4      	; 0x33e <vDIO_TOGGLE_BIT+0x5a>
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	6a 95       	dec	r22
     340:	e2 f7       	brpl	.-8      	; 0x33a <vDIO_TOGGLE_BIT+0x56>
     342:	ba 01       	movw	r22, r20
     344:	62 27       	eor	r22, r18
     346:	68 bb       	out	0x18, r22	; 24
	break;
     348:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
     34a:	25 b3       	in	r18, 0x15	; 21
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	ac 01       	movw	r20, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <vDIO_TOGGLE_BIT+0x74>
     354:	44 0f       	add	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <vDIO_TOGGLE_BIT+0x70>
     35c:	ba 01       	movw	r22, r20
     35e:	62 27       	eor	r22, r18
     360:	65 bb       	out	0x15, r22	; 21
	break;
     362:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
     364:	22 b3       	in	r18, 0x12	; 18
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	ac 01       	movw	r20, r24
     36c:	02 c0       	rjmp	.+4      	; 0x372 <vDIO_TOGGLE_BIT+0x8e>
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <vDIO_TOGGLE_BIT+0x8a>
     376:	ba 01       	movw	r22, r20
     378:	62 27       	eor	r22, r18
     37a:	62 bb       	out	0x12, r22	; 18
     37c:	08 95       	ret

0000037e <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
     37e:	84 34       	cpi	r24, 0x44	; 68
     380:	09 f4       	brne	.+2      	; 0x384 <u8DIO_READ_BIT+0x6>
     382:	4e c0       	rjmp	.+156    	; 0x420 <u8DIO_READ_BIT+0xa2>
     384:	85 34       	cpi	r24, 0x45	; 69
     386:	40 f4       	brcc	.+16     	; 0x398 <u8DIO_READ_BIT+0x1a>
     388:	82 34       	cpi	r24, 0x42	; 66
     38a:	31 f1       	breq	.+76     	; 0x3d8 <u8DIO_READ_BIT+0x5a>
     38c:	83 34       	cpi	r24, 0x43	; 67
     38e:	b0 f5       	brcc	.+108    	; 0x3fc <u8DIO_READ_BIT+0x7e>
     390:	81 34       	cpi	r24, 0x41	; 65
     392:	09 f0       	breq	.+2      	; 0x396 <u8DIO_READ_BIT+0x18>
     394:	57 c0       	rjmp	.+174    	; 0x444 <u8DIO_READ_BIT+0xc6>
     396:	0e c0       	rjmp	.+28     	; 0x3b4 <u8DIO_READ_BIT+0x36>
     398:	82 36       	cpi	r24, 0x62	; 98
     39a:	f1 f0       	breq	.+60     	; 0x3d8 <u8DIO_READ_BIT+0x5a>
     39c:	83 36       	cpi	r24, 0x63	; 99
     39e:	20 f4       	brcc	.+8      	; 0x3a8 <u8DIO_READ_BIT+0x2a>
     3a0:	81 36       	cpi	r24, 0x61	; 97
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <u8DIO_READ_BIT+0x28>
     3a4:	4f c0       	rjmp	.+158    	; 0x444 <u8DIO_READ_BIT+0xc6>
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <u8DIO_READ_BIT+0x36>
     3a8:	83 36       	cpi	r24, 0x63	; 99
     3aa:	41 f1       	breq	.+80     	; 0x3fc <u8DIO_READ_BIT+0x7e>
     3ac:	84 36       	cpi	r24, 0x64	; 100
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <u8DIO_READ_BIT+0x34>
     3b0:	49 c0       	rjmp	.+146    	; 0x444 <u8DIO_READ_BIT+0xc6>
     3b2:	36 c0       	rjmp	.+108    	; 0x420 <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
     3b4:	29 b3       	in	r18, 0x19	; 25
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	06 2e       	mov	r0, r22
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <u8DIO_READ_BIT+0x44>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <u8DIO_READ_BIT+0x40>
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	82 23       	and	r24, r18
     3ca:	93 23       	and	r25, r19
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <u8DIO_READ_BIT+0x54>
     3ce:	95 95       	asr	r25
     3d0:	87 95       	ror	r24
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <u8DIO_READ_BIT+0x50>
     3d6:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
     3d8:	26 b3       	in	r18, 0x16	; 22
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	06 2e       	mov	r0, r22
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <u8DIO_READ_BIT+0x68>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <u8DIO_READ_BIT+0x64>
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	82 23       	and	r24, r18
     3ee:	93 23       	and	r25, r19
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <u8DIO_READ_BIT+0x78>
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	6a 95       	dec	r22
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <u8DIO_READ_BIT+0x74>
     3fa:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
     3fc:	23 b3       	in	r18, 0x13	; 19
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	06 2e       	mov	r0, r22
     404:	02 c0       	rjmp	.+4      	; 0x40a <u8DIO_READ_BIT+0x8c>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	0a 94       	dec	r0
     40c:	e2 f7       	brpl	.-8      	; 0x406 <u8DIO_READ_BIT+0x88>
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	82 23       	and	r24, r18
     412:	93 23       	and	r25, r19
     414:	02 c0       	rjmp	.+4      	; 0x41a <u8DIO_READ_BIT+0x9c>
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	6a 95       	dec	r22
     41c:	e2 f7       	brpl	.-8      	; 0x416 <u8DIO_READ_BIT+0x98>
     41e:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
     420:	20 b3       	in	r18, 0x10	; 16
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	06 2e       	mov	r0, r22
     428:	02 c0       	rjmp	.+4      	; 0x42e <u8DIO_READ_BIT+0xb0>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <u8DIO_READ_BIT+0xac>
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	82 23       	and	r24, r18
     436:	93 23       	and	r25, r19
     438:	02 c0       	rjmp	.+4      	; 0x43e <u8DIO_READ_BIT+0xc0>
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <u8DIO_READ_BIT+0xbc>
     442:	08 95       	ret
		break;
		default:
		break;
   }
}
     444:	08 95       	ret

00000446 <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
     446:	84 34       	cpi	r24, 0x44	; 68
     448:	d9 f0       	breq	.+54     	; 0x480 <vDIO_SET_PORT+0x3a>
     44a:	85 34       	cpi	r24, 0x45	; 69
     44c:	38 f4       	brcc	.+14     	; 0x45c <vDIO_SET_PORT+0x16>
     44e:	82 34       	cpi	r24, 0x42	; 66
     450:	99 f0       	breq	.+38     	; 0x478 <vDIO_SET_PORT+0x32>
     452:	83 34       	cpi	r24, 0x43	; 67
     454:	98 f4       	brcc	.+38     	; 0x47c <vDIO_SET_PORT+0x36>
     456:	81 34       	cpi	r24, 0x41	; 65
     458:	a1 f4       	brne	.+40     	; 0x482 <vDIO_SET_PORT+0x3c>
     45a:	0c c0       	rjmp	.+24     	; 0x474 <vDIO_SET_PORT+0x2e>
     45c:	82 36       	cpi	r24, 0x62	; 98
     45e:	61 f0       	breq	.+24     	; 0x478 <vDIO_SET_PORT+0x32>
     460:	83 36       	cpi	r24, 0x63	; 99
     462:	18 f4       	brcc	.+6      	; 0x46a <vDIO_SET_PORT+0x24>
     464:	81 36       	cpi	r24, 0x61	; 97
     466:	69 f4       	brne	.+26     	; 0x482 <vDIO_SET_PORT+0x3c>
     468:	05 c0       	rjmp	.+10     	; 0x474 <vDIO_SET_PORT+0x2e>
     46a:	83 36       	cpi	r24, 0x63	; 99
     46c:	39 f0       	breq	.+14     	; 0x47c <vDIO_SET_PORT+0x36>
     46e:	84 36       	cpi	r24, 0x64	; 100
     470:	41 f4       	brne	.+16     	; 0x482 <vDIO_SET_PORT+0x3c>
     472:	06 c0       	rjmp	.+12     	; 0x480 <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     474:	6a bb       	out	0x1a, r22	; 26
		break;
     476:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     478:	67 bb       	out	0x17, r22	; 23
		break;
     47a:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     47c:	64 bb       	out	0x14, r22	; 20
		break;
     47e:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     480:	61 bb       	out	0x11, r22	; 17
     482:	08 95       	ret

00000484 <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     484:	84 34       	cpi	r24, 0x44	; 68
     486:	d9 f0       	breq	.+54     	; 0x4be <vDIO_WRITE_PORT+0x3a>
     488:	85 34       	cpi	r24, 0x45	; 69
     48a:	38 f4       	brcc	.+14     	; 0x49a <vDIO_WRITE_PORT+0x16>
     48c:	82 34       	cpi	r24, 0x42	; 66
     48e:	99 f0       	breq	.+38     	; 0x4b6 <vDIO_WRITE_PORT+0x32>
     490:	83 34       	cpi	r24, 0x43	; 67
     492:	98 f4       	brcc	.+38     	; 0x4ba <vDIO_WRITE_PORT+0x36>
     494:	81 34       	cpi	r24, 0x41	; 65
     496:	a1 f4       	brne	.+40     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
     498:	0c c0       	rjmp	.+24     	; 0x4b2 <vDIO_WRITE_PORT+0x2e>
     49a:	82 36       	cpi	r24, 0x62	; 98
     49c:	61 f0       	breq	.+24     	; 0x4b6 <vDIO_WRITE_PORT+0x32>
     49e:	83 36       	cpi	r24, 0x63	; 99
     4a0:	18 f4       	brcc	.+6      	; 0x4a8 <vDIO_WRITE_PORT+0x24>
     4a2:	81 36       	cpi	r24, 0x61	; 97
     4a4:	69 f4       	brne	.+26     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <vDIO_WRITE_PORT+0x2e>
     4a8:	83 36       	cpi	r24, 0x63	; 99
     4aa:	39 f0       	breq	.+14     	; 0x4ba <vDIO_WRITE_PORT+0x36>
     4ac:	84 36       	cpi	r24, 0x64	; 100
     4ae:	41 f4       	brne	.+16     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     4b2:	6b bb       	out	0x1b, r22	; 27
		break;
     4b4:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     4b6:	68 bb       	out	0x18, r22	; 24
		break;
     4b8:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     4ba:	65 bb       	out	0x15, r22	; 21
		break;
     4bc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     4be:	62 bb       	out	0x12, r22	; 18
     4c0:	08 95       	ret

000004c2 <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
     4c2:	84 34       	cpi	r24, 0x44	; 68
     4c4:	d9 f0       	breq	.+54     	; 0x4fc <u8DIO_READ_PORT+0x3a>
     4c6:	85 34       	cpi	r24, 0x45	; 69
     4c8:	38 f4       	brcc	.+14     	; 0x4d8 <u8DIO_READ_PORT+0x16>
     4ca:	82 34       	cpi	r24, 0x42	; 66
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <u8DIO_READ_PORT+0x32>
     4ce:	83 34       	cpi	r24, 0x43	; 67
     4d0:	98 f4       	brcc	.+38     	; 0x4f8 <u8DIO_READ_PORT+0x36>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	a1 f4       	brne	.+40     	; 0x4fe <u8DIO_READ_PORT+0x3c>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <u8DIO_READ_PORT+0x2e>
     4d8:	82 36       	cpi	r24, 0x62	; 98
     4da:	61 f0       	breq	.+24     	; 0x4f4 <u8DIO_READ_PORT+0x32>
     4dc:	83 36       	cpi	r24, 0x63	; 99
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <u8DIO_READ_PORT+0x24>
     4e0:	81 36       	cpi	r24, 0x61	; 97
     4e2:	69 f4       	brne	.+26     	; 0x4fe <u8DIO_READ_PORT+0x3c>
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <u8DIO_READ_PORT+0x2e>
     4e6:	83 36       	cpi	r24, 0x63	; 99
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <u8DIO_READ_PORT+0x36>
     4ea:	84 36       	cpi	r24, 0x64	; 100
     4ec:	41 f4       	brne	.+16     	; 0x4fe <u8DIO_READ_PORT+0x3c>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
     4f0:	89 b3       	in	r24, 0x19	; 25
		break;
     4f2:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
     4f4:	86 b3       	in	r24, 0x16	; 22
		break;
     4f6:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
     4f8:	83 b3       	in	r24, 0x13	; 19
		break;
     4fa:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
     4fc:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
     4fe:	08 95       	ret

00000500 <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
     500:	84 34       	cpi	r24, 0x44	; 68
     502:	09 f1       	breq	.+66     	; 0x546 <vDIO_TOGGLE_PORT+0x46>
     504:	85 34       	cpi	r24, 0x45	; 69
     506:	38 f4       	brcc	.+14     	; 0x516 <vDIO_TOGGLE_PORT+0x16>
     508:	82 34       	cpi	r24, 0x42	; 66
     50a:	a9 f0       	breq	.+42     	; 0x536 <vDIO_TOGGLE_PORT+0x36>
     50c:	83 34       	cpi	r24, 0x43	; 67
     50e:	b8 f4       	brcc	.+46     	; 0x53e <vDIO_TOGGLE_PORT+0x3e>
     510:	81 34       	cpi	r24, 0x41	; 65
     512:	e1 f4       	brne	.+56     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
     514:	0c c0       	rjmp	.+24     	; 0x52e <vDIO_TOGGLE_PORT+0x2e>
     516:	82 36       	cpi	r24, 0x62	; 98
     518:	71 f0       	breq	.+28     	; 0x536 <vDIO_TOGGLE_PORT+0x36>
     51a:	83 36       	cpi	r24, 0x63	; 99
     51c:	18 f4       	brcc	.+6      	; 0x524 <vDIO_TOGGLE_PORT+0x24>
     51e:	81 36       	cpi	r24, 0x61	; 97
     520:	a9 f4       	brne	.+42     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
     522:	05 c0       	rjmp	.+10     	; 0x52e <vDIO_TOGGLE_PORT+0x2e>
     524:	83 36       	cpi	r24, 0x63	; 99
     526:	59 f0       	breq	.+22     	; 0x53e <vDIO_TOGGLE_PORT+0x3e>
     528:	84 36       	cpi	r24, 0x64	; 100
     52a:	81 f4       	brne	.+32     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
     52c:	0c c0       	rjmp	.+24     	; 0x546 <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     52e:	8b b3       	in	r24, 0x1b	; 27
     530:	80 95       	com	r24
     532:	8b bb       	out	0x1b, r24	; 27
		break;
     534:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     536:	88 b3       	in	r24, 0x18	; 24
     538:	80 95       	com	r24
     53a:	88 bb       	out	0x18, r24	; 24
		break;
     53c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     53e:	85 b3       	in	r24, 0x15	; 21
     540:	80 95       	com	r24
     542:	85 bb       	out	0x15, r24	; 21
		break;
     544:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     546:	82 b3       	in	r24, 0x12	; 18
     548:	80 95       	com	r24
     54a:	82 bb       	out	0x12, r24	; 18
     54c:	08 95       	ret

0000054e <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
     54e:	84 34       	cpi	r24, 0x44	; 68
     550:	09 f4       	brne	.+2      	; 0x554 <vDIO_PULLUP_CONNECT+0x6>
     552:	71 c0       	rjmp	.+226    	; 0x636 <vDIO_PULLUP_CONNECT+0xe8>
     554:	85 34       	cpi	r24, 0x45	; 69
     556:	48 f4       	brcc	.+18     	; 0x56a <vDIO_PULLUP_CONNECT+0x1c>
     558:	82 34       	cpi	r24, 0x42	; 66
     55a:	99 f1       	breq	.+102    	; 0x5c2 <vDIO_PULLUP_CONNECT+0x74>
     55c:	83 34       	cpi	r24, 0x43	; 67
     55e:	08 f0       	brcs	.+2      	; 0x562 <vDIO_PULLUP_CONNECT+0x14>
     560:	4d c0       	rjmp	.+154    	; 0x5fc <vDIO_PULLUP_CONNECT+0xae>
     562:	81 34       	cpi	r24, 0x41	; 65
     564:	09 f0       	breq	.+2      	; 0x568 <vDIO_PULLUP_CONNECT+0x1a>
     566:	83 c0       	rjmp	.+262    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
     568:	0f c0       	rjmp	.+30     	; 0x588 <vDIO_PULLUP_CONNECT+0x3a>
     56a:	82 36       	cpi	r24, 0x62	; 98
     56c:	51 f1       	breq	.+84     	; 0x5c2 <vDIO_PULLUP_CONNECT+0x74>
     56e:	83 36       	cpi	r24, 0x63	; 99
     570:	20 f4       	brcc	.+8      	; 0x57a <vDIO_PULLUP_CONNECT+0x2c>
     572:	81 36       	cpi	r24, 0x61	; 97
     574:	09 f0       	breq	.+2      	; 0x578 <vDIO_PULLUP_CONNECT+0x2a>
     576:	7b c0       	rjmp	.+246    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
     578:	07 c0       	rjmp	.+14     	; 0x588 <vDIO_PULLUP_CONNECT+0x3a>
     57a:	83 36       	cpi	r24, 0x63	; 99
     57c:	09 f4       	brne	.+2      	; 0x580 <vDIO_PULLUP_CONNECT+0x32>
     57e:	3e c0       	rjmp	.+124    	; 0x5fc <vDIO_PULLUP_CONNECT+0xae>
     580:	84 36       	cpi	r24, 0x64	; 100
     582:	09 f0       	breq	.+2      	; 0x586 <vDIO_PULLUP_CONNECT+0x38>
     584:	74 c0       	rjmp	.+232    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
     586:	57 c0       	rjmp	.+174    	; 0x636 <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
     588:	41 30       	cpi	r20, 0x01	; 1
     58a:	69 f4       	brne	.+26     	; 0x5a6 <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
     58c:	2b b3       	in	r18, 0x1b	; 27
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	ac 01       	movw	r20, r24
     594:	02 c0       	rjmp	.+4      	; 0x59a <vDIO_PULLUP_CONNECT+0x4c>
     596:	44 0f       	add	r20, r20
     598:	55 1f       	adc	r21, r21
     59a:	6a 95       	dec	r22
     59c:	e2 f7       	brpl	.-8      	; 0x596 <vDIO_PULLUP_CONNECT+0x48>
     59e:	ba 01       	movw	r22, r20
     5a0:	62 2b       	or	r22, r18
     5a2:	6b bb       	out	0x1b, r22	; 27
     5a4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
     5a6:	2b b3       	in	r18, 0x1b	; 27
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vDIO_PULLUP_CONNECT+0x66>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <vDIO_PULLUP_CONNECT+0x62>
     5b8:	ba 01       	movw	r22, r20
     5ba:	60 95       	com	r22
     5bc:	62 23       	and	r22, r18
     5be:	6b bb       	out	0x1b, r22	; 27
     5c0:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
     5c2:	41 30       	cpi	r20, 0x01	; 1
     5c4:	69 f4       	brne	.+26     	; 0x5e0 <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
     5c6:	28 b3       	in	r18, 0x18	; 24
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	ac 01       	movw	r20, r24
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <vDIO_PULLUP_CONNECT+0x86>
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <vDIO_PULLUP_CONNECT+0x82>
     5d8:	ba 01       	movw	r22, r20
     5da:	62 2b       	or	r22, r18
     5dc:	68 bb       	out	0x18, r22	; 24
     5de:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
     5e0:	28 b3       	in	r18, 0x18	; 24
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	ac 01       	movw	r20, r24
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vDIO_PULLUP_CONNECT+0xa0>
     5ea:	44 0f       	add	r20, r20
     5ec:	55 1f       	adc	r21, r21
     5ee:	6a 95       	dec	r22
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <vDIO_PULLUP_CONNECT+0x9c>
     5f2:	ba 01       	movw	r22, r20
     5f4:	60 95       	com	r22
     5f6:	62 23       	and	r22, r18
     5f8:	68 bb       	out	0x18, r22	; 24
     5fa:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
     5fc:	41 30       	cpi	r20, 0x01	; 1
     5fe:	69 f4       	brne	.+26     	; 0x61a <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
     600:	25 b3       	in	r18, 0x15	; 21
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	ac 01       	movw	r20, r24
     608:	02 c0       	rjmp	.+4      	; 0x60e <vDIO_PULLUP_CONNECT+0xc0>
     60a:	44 0f       	add	r20, r20
     60c:	55 1f       	adc	r21, r21
     60e:	6a 95       	dec	r22
     610:	e2 f7       	brpl	.-8      	; 0x60a <vDIO_PULLUP_CONNECT+0xbc>
     612:	ba 01       	movw	r22, r20
     614:	62 2b       	or	r22, r18
     616:	65 bb       	out	0x15, r22	; 21
     618:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
     61a:	25 b3       	in	r18, 0x15	; 21
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ac 01       	movw	r20, r24
     622:	02 c0       	rjmp	.+4      	; 0x628 <vDIO_PULLUP_CONNECT+0xda>
     624:	44 0f       	add	r20, r20
     626:	55 1f       	adc	r21, r21
     628:	6a 95       	dec	r22
     62a:	e2 f7       	brpl	.-8      	; 0x624 <vDIO_PULLUP_CONNECT+0xd6>
     62c:	ba 01       	movw	r22, r20
     62e:	60 95       	com	r22
     630:	62 23       	and	r22, r18
     632:	65 bb       	out	0x15, r22	; 21
     634:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
     636:	41 30       	cpi	r20, 0x01	; 1
     638:	69 f4       	brne	.+26     	; 0x654 <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
     63a:	22 b3       	in	r18, 0x12	; 18
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	ac 01       	movw	r20, r24
     642:	02 c0       	rjmp	.+4      	; 0x648 <vDIO_PULLUP_CONNECT+0xfa>
     644:	44 0f       	add	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	6a 95       	dec	r22
     64a:	e2 f7       	brpl	.-8      	; 0x644 <vDIO_PULLUP_CONNECT+0xf6>
     64c:	ba 01       	movw	r22, r20
     64e:	62 2b       	or	r22, r18
     650:	62 bb       	out	0x12, r22	; 18
     652:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
     654:	22 b3       	in	r18, 0x12	; 18
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	ac 01       	movw	r20, r24
     65c:	02 c0       	rjmp	.+4      	; 0x662 <vDIO_PULLUP_CONNECT+0x114>
     65e:	44 0f       	add	r20, r20
     660:	55 1f       	adc	r21, r21
     662:	6a 95       	dec	r22
     664:	e2 f7       	brpl	.-8      	; 0x65e <vDIO_PULLUP_CONNECT+0x110>
     666:	ba 01       	movw	r22, r20
     668:	60 95       	com	r22
     66a:	62 23       	and	r22, r18
     66c:	62 bb       	out	0x12, r22	; 18
     66e:	08 95       	ret

00000670 <vDIO_WRITE_LOW_NIBBLE>:
		default:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	c8 2f       	mov	r28, r24
     678:	06 2f       	mov	r16, r22
	vDIO_WRITE_BIT(port,0,READ_BIT(value,0));
     67a:	46 2f       	mov	r20, r22
     67c:	41 70       	andi	r20, 0x01	; 1
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,1,READ_BIT(value,1));
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	a8 01       	movw	r20, r16
     688:	42 70       	andi	r20, 0x02	; 2
     68a:	50 70       	andi	r21, 0x00	; 0
     68c:	55 95       	asr	r21
     68e:	47 95       	ror	r20
     690:	8c 2f       	mov	r24, r28
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,2,READ_BIT(value,2));
     698:	a8 01       	movw	r20, r16
     69a:	44 70       	andi	r20, 0x04	; 4
     69c:	50 70       	andi	r21, 0x00	; 0
     69e:	55 95       	asr	r21
     6a0:	47 95       	ror	r20
     6a2:	55 95       	asr	r21
     6a4:	47 95       	ror	r20
     6a6:	8c 2f       	mov	r24, r28
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,3,READ_BIT(value,3));
     6ae:	08 70       	andi	r16, 0x08	; 8
     6b0:	10 70       	andi	r17, 0x00	; 0
     6b2:	a8 01       	movw	r20, r16
     6b4:	55 95       	asr	r21
     6b6:	47 95       	ror	r20
     6b8:	55 95       	asr	r21
     6ba:	47 95       	ror	r20
     6bc:	55 95       	asr	r21
     6be:	47 95       	ror	r20
     6c0:	8c 2f       	mov	r24, r28
     6c2:	63 e0       	ldi	r22, 0x03	; 3
     6c4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
}
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <vDIO_WRITE_HIGH_NIBBLE>:
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	c8 2f       	mov	r28, r24
     6da:	d6 2f       	mov	r29, r22
	vDIO_WRITE_BIT(port,4,READ_BIT(value,4));
     6dc:	06 2f       	mov	r16, r22
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	a8 01       	movw	r20, r16
     6e2:	40 71       	andi	r20, 0x10	; 16
     6e4:	50 70       	andi	r21, 0x00	; 0
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	55 95       	asr	r21
     6f4:	47 95       	ror	r20
     6f6:	64 e0       	ldi	r22, 0x04	; 4
     6f8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,5,READ_BIT(value,5));
     6fc:	a8 01       	movw	r20, r16
     6fe:	40 72       	andi	r20, 0x20	; 32
     700:	50 70       	andi	r21, 0x00	; 0
     702:	55 95       	asr	r21
     704:	47 95       	ror	r20
     706:	55 95       	asr	r21
     708:	47 95       	ror	r20
     70a:	55 95       	asr	r21
     70c:	47 95       	ror	r20
     70e:	55 95       	asr	r21
     710:	47 95       	ror	r20
     712:	55 95       	asr	r21
     714:	47 95       	ror	r20
     716:	8c 2f       	mov	r24, r28
     718:	65 e0       	ldi	r22, 0x05	; 5
     71a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,6,READ_BIT(value,6));
     71e:	00 74       	andi	r16, 0x40	; 64
     720:	10 70       	andi	r17, 0x00	; 0
     722:	a8 01       	movw	r20, r16
     724:	04 2e       	mov	r0, r20
     726:	45 2f       	mov	r20, r21
     728:	00 0c       	add	r0, r0
     72a:	44 1f       	adc	r20, r20
     72c:	55 0b       	sbc	r21, r21
     72e:	00 0c       	add	r0, r0
     730:	44 1f       	adc	r20, r20
     732:	55 1f       	adc	r21, r21
     734:	8c 2f       	mov	r24, r28
     736:	66 e0       	ldi	r22, 0x06	; 6
     738:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,7,READ_BIT(value,7));
     73c:	4d 2f       	mov	r20, r29
     73e:	44 1f       	adc	r20, r20
     740:	44 27       	eor	r20, r20
     742:	44 1f       	adc	r20, r20
     744:	8c 2f       	mov	r24, r28
     746:	67 e0       	ldi	r22, 0x07	; 7
     748:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <EEPROM_WRITE>:
#include <avr/io.h>
#include "std_macros.h"
#include "STD_TYPES.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEARL=(char)address;
     756:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     758:	9f bb       	out	0x1f, r25	; 31
	EEDR=data;
     75a:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     75c:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     75e:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
     760:	e1 99       	sbic	0x1c, 1	; 28
     762:	fe cf       	rjmp	.-4      	; 0x760 <EEPROM_WRITE+0xa>
}
     764:	08 95       	ret

00000766 <EEPROMR_READ>:
unsigned char EEPROMR_READ(const unsigned short address)
{
	EEARL=(char)address;
     766:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     768:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EEWE);
     76a:	e1 9a       	sbi	0x1c, 1	; 28
	return EEDR;
     76c:	8d b3       	in	r24, 0x1d	; 29
}
     76e:	08 95       	ret

00000770 <eeprom_readbyte_from_address>:
uint8 eeprom_readbyte_from_address(const uint16 address1)
{
	
	while(((EECR &(1<<EERE))>>EEWE)==1);
     770:	2c b3       	in	r18, 0x1c	; 28
	EEAR=address1;
     772:	9f bb       	out	0x1f, r25	; 31
     774:	8e bb       	out	0x1e, r24	; 30
	EECR|=(1<<EERE);
     776:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     778:	8d b3       	in	r24, 0x1d	; 29
}
     77a:	08 95       	ret

0000077c <eeprom_readblock_from_address>:
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
     77c:	dc 01       	movw	r26, r24
	while(((EECR & (1<< EERE)) >>EEWE)==1);
     77e:	8c b3       	in	r24, 0x1c	; 28
	uint16 counter=0;
	while(counter<size)
     780:	41 15       	cp	r20, r1
     782:	51 05       	cpc	r21, r1
     784:	89 f0       	breq	.+34     	; 0x7a8 <eeprom_readblock_from_address+0x2c>
     786:	e6 2f       	mov	r30, r22
     788:	f7 2f       	mov	r31, r23
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
	while(((EECR &(1<<EERE))>>EEWE)==1);
	EEAR=address1;
	EECR|=(1<<EERE);
	return EEDR;
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
     78e:	c9 01       	movw	r24, r18
     790:	8a 0f       	add	r24, r26
     792:	9b 1f       	adc	r25, r27
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
	{
		EEAR=address2+counter;
     794:	9f bb       	out	0x1f, r25	; 31
     796:	8e bb       	out	0x1e, r24	; 30
	    EECR|=(1<<EERE);
     798:	e0 9a       	sbi	0x1c, 0	; 28
		*(data1+counter)=EEDR;
     79a:	8d b3       	in	r24, 0x1d	; 29
     79c:	81 93       	st	Z+, r24
		counter++;
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
}
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
     7a2:	24 17       	cp	r18, r20
     7a4:	35 07       	cpc	r19, r21
     7a6:	99 f7       	brne	.-26     	; 0x78e <eeprom_readblock_from_address+0x12>
     7a8:	08 95       	ret

000007aa <eeprom_writebyte_to_address>:
		counter++;
	}	
}	
void eeprom_writebyte_to_address(const uint16 address2,const uint8 data2)
{
   while(((EECR & (1<< EERE)) >>EEWE)==1);
     7aa:	2c b3       	in	r18, 0x1c	; 28
   EEAR=address2;
     7ac:	9f bb       	out	0x1f, r25	; 31
     7ae:	8e bb       	out	0x1e, r24	; 30
   EECR|=(1<<EERE);
     7b0:	e0 9a       	sbi	0x1c, 0	; 28
   if (EEDR !=data2)
     7b2:	8d b3       	in	r24, 0x1d	; 29
     7b4:	86 17       	cp	r24, r22
     7b6:	19 f0       	breq	.+6      	; 0x7be <eeprom_writebyte_to_address+0x14>
   {
	   EEDR=data2;
     7b8:	6d bb       	out	0x1d, r22	; 29
	   EECR|=(1<<EEMWE);
     7ba:	e2 9a       	sbi	0x1c, 2	; 28
	   EECR|=(1<<EEWE);    
     7bc:	e1 9a       	sbi	0x1c, 1	; 28
     7be:	08 95       	ret

000007c0 <eeprom_writeblock_from_address>:
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
     7c0:	dc 01       	movw	r26, r24
	uint16 counter=0;
	
	while(counter < size)
     7c2:	41 15       	cp	r20, r1
     7c4:	51 05       	cpc	r21, r1
     7c6:	b9 f0       	breq	.+46     	; 0x7f6 <eeprom_writeblock_from_address+0x36>
     7c8:	e6 2f       	mov	r30, r22
     7ca:	f7 2f       	mov	r31, r23
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
     7d0:	8c b3       	in	r24, 0x1c	; 28
	   EEDR=data2;
	   EECR|=(1<<EEMWE);
	   EECR|=(1<<EEWE);    
   }
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
     7d2:	c9 01       	movw	r24, r18
     7d4:	8a 0f       	add	r24, r26
     7d6:	9b 1f       	adc	r25, r27
	uint16 counter=0;
	
	while(counter < size)
	{
		 while(((EECR & (1<< EERE)) >>EEWE)==1);
		 EEAR=address2+counter;
     7d8:	9f bb       	out	0x1f, r25	; 31
     7da:	8e bb       	out	0x1e, r24	; 30
		 EECR|=(1<<EERE);
     7dc:	e0 9a       	sbi	0x1c, 0	; 28
		 if (EEDR != (*(data2+counter)))
     7de:	9d b3       	in	r25, 0x1d	; 29
     7e0:	81 91       	ld	r24, Z+
     7e2:	98 17       	cp	r25, r24
     7e4:	19 f0       	breq	.+6      	; 0x7ec <eeprom_writeblock_from_address+0x2c>
		 {
			 EEDR=*(data2+counter);
     7e6:	8d bb       	out	0x1d, r24	; 29
			 EECR|=(1<<EEMWE);
     7e8:	e2 9a       	sbi	0x1c, 2	; 28
			 EECR|=(1<<EEWE);
     7ea:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{
			
		}
		counter++;
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
}	
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
	
	while(counter < size)
     7f0:	24 17       	cp	r18, r20
     7f2:	35 07       	cpc	r19, r21
     7f4:	69 f7       	brne	.-38     	; 0x7d0 <eeprom_writeblock_from_address+0x10>
     7f6:	08 95       	ret

000007f8 <main>:
unsigned char counter2=0;
unsigned char counter3=0;
unsigned char counter4=0;
 //unsigned char counter6= 0;
int main(void)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	2a 97       	sbiw	r28, 0x0a	; 10
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
// 	 keypad_vinit();
// 	 LCD_INIT();
// 	 unsigned char keypressd=notpassed;
	
	 keypad_vinit();
     80c:	0e 94 71 06 	call	0xce2	; 0xce2 <keypad_vinit>
	 LCD_INIT();
     810:	0e 94 3a 07 	call	0xe74	; 0xe74 <LCD_INIT>
		 LCD_SEND_CMD(0X0C);
	     
	     unsigned char user[card_size]={NOT_SELECTED,NOT_SELECTED,NOT_SELECTED,NOT_SELECTED};
	     unsigned char STORED_card[card_size] ={0XFF,0XFF,0XFF,0XFF};
			  LCD_MOVE_CURSOR(1,5);
			  LCD_SEND_STRING("welcome");
     814:	0f 2e       	mov	r0, r31
     816:	f0 e6       	ldi	r31, 0x60	; 96
     818:	ef 2e       	mov	r14, r31
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
			  LCD_MOVE_CURSOR(2,2);
			  LCD_SEND_STRING("voting machine");
     820:	0f 2e       	mov	r0, r31
     822:	f8 e6       	ldi	r31, 0x68	; 104
     824:	cf 2e       	mov	r12, r31
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	df 2e       	mov	r13, r31
     82a:	f0 2d       	mov	r31, r0
			  _delay_ms(700);
			  LCD_clear_screen();
			  LCD_SEND_STRING("last four digits ");
     82c:	0f 2e       	mov	r0, r31
     82e:	f7 e7       	ldi	r31, 0x77	; 119
     830:	af 2e       	mov	r10, r31
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	bf 2e       	mov	r11, r31
     836:	f0 2d       	mov	r31, r0
			  LCD_MOVE_CURSOR(2,3);
			  LCD_SEND_STRING("of ID card");
     838:	0f 2e       	mov	r0, r31
     83a:	f9 e8       	ldi	r31, 0x89	; 137
     83c:	8f 2e       	mov	r8, r31
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	9f 2e       	mov	r9, r31
     842:	f0 2d       	mov	r31, r0
			  _delay_ms(1000);
			  LCD_clear_screen();
			  LCD_SEND_STRING("Enter ID:");
     844:	0f 2e       	mov	r0, r31
     846:	f4 e9       	ldi	r31, 0x94	; 148
     848:	6f 2e       	mov	r6, r31
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	7f 2e       	mov	r7, r31
     84e:	f0 2d       	mov	r31, r0
			  LCD_MOVE_CURSOR(2,6);
			  LCD_SEND_STRING("____");
     850:	0f 2e       	mov	r0, r31
     852:	fe e9       	ldi	r31, 0x9E	; 158
     854:	4f 2e       	mov	r4, r31
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	5f 2e       	mov	r5, r31
     85a:	f0 2d       	mov	r31, r0
		 u8Button_read('C',1);
		 u8Button_read('C',2);
		 u8Button_read('C',3);
		 u8Button_read('C',4);
		 LCD_MOVE_CURSOR(1,3);
		 LCD_SEND_STRING("Please Vote");
     85c:	0f 2e       	mov	r0, r31
     85e:	f6 ec       	ldi	r31, 0xC6	; 198
     860:	2f 2e       	mov	r2, r31
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	3f 2e       	mov	r3, r31
     866:	f0 2d       	mov	r31, r0
	 keypad_vinit();
	 LCD_INIT();
	 unsigned char keypressd=notpassed;
	 while(1)
	 {
		 LCD_SEND_CMD(0X0C);
     868:	8c e0       	ldi	r24, 0x0C	; 12
     86a:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
	     
	     unsigned char user[card_size]={NOT_SELECTED,NOT_SELECTED,NOT_SELECTED,NOT_SELECTED};
     86e:	95 e0       	ldi	r25, 0x05	; 5
     870:	fe 01       	movw	r30, r28
     872:	36 96       	adiw	r30, 0x06	; 6
     874:	df 01       	movw	r26, r30
     876:	89 2f       	mov	r24, r25
     878:	1d 92       	st	X+, r1
     87a:	8a 95       	dec	r24
     87c:	e9 f7       	brne	.-6      	; 0x878 <__stack+0x19>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	8e 83       	std	Y+6, r24	; 0x06
     882:	8f 83       	std	Y+7, r24	; 0x07
     884:	88 87       	std	Y+8, r24	; 0x08
     886:	89 87       	std	Y+9, r24	; 0x09
	     unsigned char STORED_card[card_size] ={0XFF,0XFF,0XFF,0XFF};
     888:	fe 01       	movw	r30, r28
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	df 01       	movw	r26, r30
     88e:	1d 92       	st	X+, r1
     890:	9a 95       	dec	r25
     892:	e9 f7       	brne	.-6      	; 0x88e <__stack+0x2f>
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	8a 83       	std	Y+2, r24	; 0x02
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	8c 83       	std	Y+4, r24	; 0x04
			  LCD_MOVE_CURSOR(1,5);
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	65 e0       	ldi	r22, 0x05	; 5
     8a0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("welcome");
     8a4:	c7 01       	movw	r24, r14
     8a6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
			  LCD_MOVE_CURSOR(2,2);
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	62 e0       	ldi	r22, 0x02	; 2
     8ae:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("voting machine");
     8b2:	c6 01       	movw	r24, r12
     8b4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	96 e1       	ldi	r25, 0x16	; 22
     8bc:	a1 e1       	ldi	r26, 0x11	; 17
     8be:	81 50       	subi	r24, 0x01	; 1
     8c0:	90 40       	sbci	r25, 0x00	; 0
     8c2:	a0 40       	sbci	r26, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <__stack+0x5f>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
			  _delay_ms(700);
			  LCD_clear_screen();
     8ca:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
			  LCD_SEND_STRING("last four digits ");
     8ce:	c5 01       	movw	r24, r10
     8d0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
			  LCD_MOVE_CURSOR(2,3);
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	63 e0       	ldi	r22, 0x03	; 3
     8d8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("of ID card");
     8dc:	c4 01       	movw	r24, r8
     8de:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	99 e6       	ldi	r25, 0x69	; 105
     8e6:	a8 e1       	ldi	r26, 0x18	; 24
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	a0 40       	sbci	r26, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__stack+0x93>
     8f2:	00 00       	nop
			  _delay_ms(1000);
			  LCD_clear_screen();
     8f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
			  LCD_SEND_STRING("Enter ID:");
     8f8:	c3 01       	movw	r24, r6
     8fa:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
			  LCD_MOVE_CURSOR(2,6);
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	66 e0       	ldi	r22, 0x06	; 6
     902:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("____");
     906:	c2 01       	movw	r24, r4
     908:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
			  LCD_MOVE_CURSOR(2,6);
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	66 e0       	ldi	r22, 0x06	; 6
     910:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
     914:	06 e0       	ldi	r16, 0x06	; 6
// 		 }
        for(counter6=0;counter6<=3;counter6++)
        {
	        do
	        {
		        keypressd=keybad_u8read_press();
     916:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keybad_u8read_press>
     91a:	18 2f       	mov	r17, r24
	        }while(keypressd==notpassed);
     91c:	8f 3f       	cpi	r24, 0xFF	; 255
     91e:	d9 f3       	breq	.-10     	; 0x916 <__stack+0xb7>
	        LCD_MOVE_CURSOR(2,counter6+6);
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	60 2f       	mov	r22, r16
     924:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
	        LCD_SEND_CHAR(keypressd);
     928:	81 2f       	mov	r24, r17
     92a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	92 e5       	ldi	r25, 0x52	; 82
     932:	a7 e0       	ldi	r26, 0x07	; 7
     934:	81 50       	subi	r24, 0x01	; 1
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	a0 40       	sbci	r26, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
     93e:	00 00       	nop
	        _delay_ms(300);
	        LCD_MOVE_CURSOR(2,counter1+6);
     940:	60 91 09 01 	lds	r22, 0x0109
     944:	6a 5f       	subi	r22, 0xFA	; 250
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
     94c:	0f 5f       	subi	r16, 0xFF	; 255
// 			 LCD_MOVE_CURSOR(2,6+(counter6++));
// 			_delay_ms(100);
// 			 /*counter6++;*/	
// 			// keypressd = notpassed;
// 		 }
        for(counter6=0;counter6<=3;counter6++)
     94e:	0a 30       	cpi	r16, 0x0A	; 10
     950:	11 f7       	brne	.-60     	; 0x916 <__stack+0xb7>
	        LCD_SEND_CHAR(keypressd);
	        _delay_ms(300);
	        LCD_MOVE_CURSOR(2,counter1+6);
	        
        }
		 LCD_clear_screen();
     952:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
		 eeprom_writeblock_from_address(location_user2,user,card_size);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	be 01       	movw	r22, r28
     95c:	6a 5f       	subi	r22, 0xFA	; 250
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	45 e0       	ldi	r20, 0x05	; 5
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <eeprom_writeblock_from_address>
		 eeprom_writebyte_to_address (status_location_user1,card_set);
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <eeprom_writebyte_to_address>
         
		 eeprom_readblock_from_address(location_user2,STORED_card,card_size);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	45 e0       	ldi	r20, 0x05	; 5
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	0e 94 be 03 	call	0x77c	; 0x77c <eeprom_readblock_from_address>
		 if(compare_pass(user,STORED_card,card_size) == 1)
     984:	ce 01       	movw	r24, r28
     986:	06 96       	adiw	r24, 0x06	; 6
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	45 e0       	ldi	r20, 0x05	; 5
     990:	0e 94 de 07 	call	0xfbc	; 0xfbc <compare_pass>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	e1 f4       	brne	.+56     	; 0x9d0 <__stack+0x171>
		 {
			 LCD_clear_screen();
     998:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
			 LCD_MOVE_CURSOR(1,2);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	62 e0       	ldi	r22, 0x02	; 2
     9a0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			 LCD_SEND_STRING("press once on ");
     9a4:	83 ea       	ldi	r24, 0xA3	; 163
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
			 LCD_MOVE_CURSOR(2,3);
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			 LCD_SEND_STRING("any button");
     9b4:	82 eb       	ldi	r24, 0xB2	; 178
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	93 ec       	ldi	r25, 0xC3	; 195
     9c0:	a9 e0       	ldi	r26, 0x09	; 9
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	a0 40       	sbci	r26, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__stack+0x163>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__stack+0x16d>
     9cc:	00 00       	nop
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <__stack+0x193>
			 _delay_ms(400);
		 }
		 else
		 {
			 
			 LCD_clear_screen();
     9d0:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
			 LCD_SEND_STRING("wrong ID");
     9d4:	8d eb       	ldi	r24, 0xBD	; 189
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	96 e1       	ldi	r25, 0x16	; 22
     9e0:	a1 e1       	ldi	r26, 0x11	; 17
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	90 40       	sbci	r25, 0x00	; 0
     9e6:	a0 40       	sbci	r26, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <__stack+0x183>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <__stack+0x18d>
     9ec:	00 00       	nop
			 _delay_ms(700);
			 LCD_clear_screen();
     9ee:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
			
		 }
		 LCD_clear_screen();
     9f2:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
		 LCD_SEND_CMD(0X0C);
     9f6:	8c e0       	ldi	r24, 0x0C	; 12
     9f8:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
		 u8Button_read('C',0);
     9fc:	83 e4       	ldi	r24, 0x43	; 67
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
		 u8Button_read('C',1);
     a04:	83 e4       	ldi	r24, 0x43	; 67
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
		 u8Button_read('C',2);
     a0c:	83 e4       	ldi	r24, 0x43	; 67
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
		 u8Button_read('C',3);
     a14:	83 e4       	ldi	r24, 0x43	; 67
     a16:	63 e0       	ldi	r22, 0x03	; 3
     a18:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
		 u8Button_read('C',4);
     a1c:	83 e4       	ldi	r24, 0x43	; 67
     a1e:	64 e0       	ldi	r22, 0x04	; 4
     a20:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
		 LCD_MOVE_CURSOR(1,3);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	63 e0       	ldi	r22, 0x03	; 3
     a28:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_STRING("Please Vote");
     a2c:	c1 01       	movw	r24, r2
     a2e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	94 e3       	ldi	r25, 0x34	; 52
     a36:	ac e0       	ldi	r26, 0x0C	; 12
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	90 40       	sbci	r25, 0x00	; 0
     a3c:	a0 40       	sbci	r26, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <__stack+0x1d9>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <__stack+0x1e3>
     a42:	00 00       	nop
		 _delay_ms(500);
		 LCD_clear_screen();
     a44:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
		 LCD_SEND_STRING("A=");
     a48:	82 ed       	ldi	r24, 0xD2	; 210
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
		 LCD_MOVE_CURSOR(1,3);
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	63 e0       	ldi	r22, 0x03	; 3
     a54:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_CHAR(counter1+48);
     a58:	80 91 09 01 	lds	r24, 0x0109
     a5c:	80 5d       	subi	r24, 0xD0	; 208
     a5e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
		 LCD_MOVE_CURSOR(1,12);
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	6c e0       	ldi	r22, 0x0C	; 12
     a66:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_STRING("B=0");
     a6a:	85 ed       	ldi	r24, 0xD5	; 213
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
		 LCD_MOVE_CURSOR(1,14);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	6e e0       	ldi	r22, 0x0E	; 14
     a76:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_CHAR(counter2+48);
     a7a:	80 91 08 01 	lds	r24, 0x0108
     a7e:	80 5d       	subi	r24, 0xD0	; 208
     a80:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
		 LCD_MOVE_CURSOR(2,1);
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_STRING("C=0");
     a8c:	89 ed       	ldi	r24, 0xD9	; 217
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
		 LCD_MOVE_CURSOR(2,3);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	63 e0       	ldi	r22, 0x03	; 3
     a98:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_CHAR(counter3+48);
     a9c:	80 91 07 01 	lds	r24, 0x0107
     aa0:	80 5d       	subi	r24, 0xD0	; 208
     aa2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
		 LCD_MOVE_CURSOR(2,12);
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	6c e0       	ldi	r22, 0x0C	; 12
     aaa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_STRING("D=0");
     aae:	8d ed       	ldi	r24, 0xDD	; 221
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
		 LCD_MOVE_CURSOR(2,14);
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	6e e0       	ldi	r22, 0x0E	; 14
     aba:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
		 LCD_SEND_CHAR(counter4+48);
     abe:	80 91 06 01 	lds	r24, 0x0106
     ac2:	80 5d       	subi	r24, 0xD0	; 208
     ac4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
		 
		while(1)
		{
			
			if(u8Button_read('C',0)==1)
     ac8:	83 e4       	ldi	r24, 0x43	; 67
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	51 f5       	brne	.+84     	; 0xb28 <__stack+0x2c9>
			{
			counter1++;
     ad4:	80 91 09 01 	lds	r24, 0x0109
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 09 01 	sts	0x0109, r24
			LCD_MOVE_CURSOR(1,3);
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
			    if(counter1<10)
     ae6:	80 91 09 01 	lds	r24, 0x0109
     aea:	8a 30       	cpi	r24, 0x0A	; 10
     aec:	20 f4       	brcc	.+8      	; 0xaf6 <__stack+0x297>
				 {
				   LCD_SEND_CHAR(counter1+48);
     aee:	80 5d       	subi	r24, 0xD0	; 208
     af0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
     af4:	10 c0       	rjmp	.+32     	; 0xb16 <__stack+0x2b7>
				 }
				else
				 {
				   LCD_SEND_CHAR(counter1/10+48);
     af6:	1a e0       	ldi	r17, 0x0A	; 10
     af8:	61 2f       	mov	r22, r17
     afa:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     afe:	80 5d       	subi	r24, 0xD0	; 208
     b00:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
				   LCD_SEND_CHAR(counter1%10+48);  
     b04:	80 91 09 01 	lds	r24, 0x0109
     b08:	61 2f       	mov	r22, r17
     b0a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     b0e:	89 2f       	mov	r24, r25
     b10:	80 5d       	subi	r24, 0xD0	; 208
     b12:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
				 }
				 while(u8Button_read('C',0)==1);
     b16:	83 e4       	ldi	r24, 0x43	; 67
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	d1 f3       	breq	.-12     	; 0xb16 <__stack+0x2b7>
				  LCD_clear_screen();
     b22:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
				 break;
     b26:	a0 ce       	rjmp	.-704    	; 0x868 <__stack+0x9>
			}		
		   else if(u8Button_read('C',1)==1)
     b28:	83 e4       	ldi	r24, 0x43	; 67
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	51 f5       	brne	.+84     	; 0xb88 <__stack+0x329>
			 {
				counter2++;
     b34:	80 91 08 01 	lds	r24, 0x0108
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 08 01 	sts	0x0108, r24
				LCD_MOVE_CURSOR(1,14);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	6e e0       	ldi	r22, 0x0E	; 14
     b42:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				if(counter2<10)
     b46:	80 91 08 01 	lds	r24, 0x0108
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	20 f4       	brcc	.+8      	; 0xb56 <__stack+0x2f7>
				{
					LCD_SEND_CHAR(counter2+48);	
     b4e:	80 5d       	subi	r24, 0xD0	; 208
     b50:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
     b54:	10 c0       	rjmp	.+32     	; 0xb76 <__stack+0x317>
				}
				else
				{
					LCD_SEND_CHAR(counter2/10+48);
     b56:	1a e0       	ldi	r17, 0x0A	; 10
     b58:	61 2f       	mov	r22, r17
     b5a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     b5e:	80 5d       	subi	r24, 0xD0	; 208
     b60:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
					LCD_SEND_CHAR(counter2%10+48);	
     b64:	80 91 08 01 	lds	r24, 0x0108
     b68:	61 2f       	mov	r22, r17
     b6a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     b6e:	89 2f       	mov	r24, r25
     b70:	80 5d       	subi	r24, 0xD0	; 208
     b72:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
				}
				while(u8Button_read('C',1)==1);
     b76:	83 e4       	ldi	r24, 0x43	; 67
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	d1 f3       	breq	.-12     	; 0xb76 <__stack+0x317>
				 LCD_clear_screen();
     b82:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
				 break;
     b86:	70 ce       	rjmp	.-800    	; 0x868 <__stack+0x9>
			}
			else if (u8Button_read('C',2)==1)
     b88:	83 e4       	ldi	r24, 0x43	; 67
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	51 f5       	brne	.+84     	; 0xbe8 <__stack+0x389>
			{
				counter3++;
     b94:	80 91 07 01 	lds	r24, 0x0107
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	80 93 07 01 	sts	0x0107, r24
				LCD_MOVE_CURSOR(2,3);
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	63 e0       	ldi	r22, 0x03	; 3
     ba2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				if(counter3<10)
     ba6:	80 91 07 01 	lds	r24, 0x0107
     baa:	8a 30       	cpi	r24, 0x0A	; 10
     bac:	20 f4       	brcc	.+8      	; 0xbb6 <__stack+0x357>
				{
					LCD_SEND_CHAR(counter3+48);	
     bae:	80 5d       	subi	r24, 0xD0	; 208
     bb0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
     bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <__stack+0x377>
				}
				else
				{
					LCD_SEND_CHAR(counter3/10+48);
     bb6:	1a e0       	ldi	r17, 0x0A	; 10
     bb8:	61 2f       	mov	r22, r17
     bba:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     bbe:	80 5d       	subi	r24, 0xD0	; 208
     bc0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
					LCD_SEND_CHAR(counter3%10+48);
     bc4:	80 91 07 01 	lds	r24, 0x0107
     bc8:	61 2f       	mov	r22, r17
     bca:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     bce:	89 2f       	mov	r24, r25
     bd0:	80 5d       	subi	r24, 0xD0	; 208
     bd2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
				}
				 while(u8Button_read('C',2)==1);
     bd6:	83 e4       	ldi	r24, 0x43	; 67
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	d1 f3       	breq	.-12     	; 0xbd6 <__stack+0x377>
				LCD_clear_screen();
     be2:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
				break;
     be6:	40 ce       	rjmp	.-896    	; 0x868 <__stack+0x9>
			}
		
			else if(u8Button_read('C',3)==1)
     be8:	83 e4       	ldi	r24, 0x43	; 67
     bea:	63 e0       	ldi	r22, 0x03	; 3
     bec:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	99 f5       	brne	.+102    	; 0xc5a <__stack+0x3fb>
     bf4:	8f e7       	ldi	r24, 0x7F	; 127
     bf6:	98 e3       	ldi	r25, 0x38	; 56
     bf8:	a1 e0       	ldi	r26, 0x01	; 1
     bfa:	81 50       	subi	r24, 0x01	; 1
     bfc:	90 40       	sbci	r25, 0x00	; 0
     bfe:	a0 40       	sbci	r26, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <__stack+0x39b>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <__stack+0x3a5>
     c04:	00 00       	nop
			{
				_delay_ms(50);
				counter4++;
     c06:	80 91 06 01 	lds	r24, 0x0106
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	80 93 06 01 	sts	0x0106, r24
				LCD_MOVE_CURSOR(2,14);
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	6e e0       	ldi	r22, 0x0E	; 14
     c14:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				if(counter4<10)
     c18:	80 91 06 01 	lds	r24, 0x0106
     c1c:	8a 30       	cpi	r24, 0x0A	; 10
     c1e:	20 f4       	brcc	.+8      	; 0xc28 <__stack+0x3c9>
				{
					LCD_SEND_CHAR(counter4+48);
     c20:	80 5d       	subi	r24, 0xD0	; 208
     c22:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
     c26:	10 c0       	rjmp	.+32     	; 0xc48 <__stack+0x3e9>
				}					
				else
				{
					LCD_SEND_CHAR(counter4/10+48);
     c28:	1a e0       	ldi	r17, 0x0A	; 10
     c2a:	61 2f       	mov	r22, r17
     c2c:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     c30:	80 5d       	subi	r24, 0xD0	; 208
     c32:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
					LCD_SEND_CHAR(counter4%10+48);	
     c36:	80 91 06 01 	lds	r24, 0x0106
     c3a:	61 2f       	mov	r22, r17
     c3c:	0e 94 fa 07 	call	0xff4	; 0xff4 <__udivmodqi4>
     c40:	89 2f       	mov	r24, r25
     c42:	80 5d       	subi	r24, 0xD0	; 208
     c44:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
				}
				 while(u8Button_read('C',3)==1);
     c48:	83 e4       	ldi	r24, 0x43	; 67
     c4a:	63 e0       	ldi	r22, 0x03	; 3
     c4c:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	d1 f3       	breq	.-12     	; 0xc48 <__stack+0x3e9>
				LCD_clear_screen();
     c54:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
				break;
     c58:	07 ce       	rjmp	.-1010   	; 0x868 <__stack+0x9>
			}
			else if(u8Button_read('C',4)==1)
     c5a:	83 e4       	ldi	r24, 0x43	; 67
     c5c:	64 e0       	ldi	r22, 0x04	; 4
     c5e:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	71 f5       	brne	.+92     	; 0xcc2 <__stack+0x463>
			{
				counter1=counter2=counter3=counter4=0;
     c66:	10 92 06 01 	sts	0x0106, r1
     c6a:	10 92 07 01 	sts	0x0107, r1
     c6e:	10 92 08 01 	sts	0x0108, r1
     c72:	10 92 09 01 	sts	0x0109, r1
			
			
				 LCD_MOVE_CURSOR(1,1);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("A=0 ");
     c7c:	81 ee       	ldi	r24, 0xE1	; 225
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
				 LCD_MOVE_CURSOR(1,12);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	6c e0       	ldi	r22, 0x0C	; 12
     c88:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("B=0 ");
     c8c:	86 ee       	ldi	r24, 0xE6	; 230
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
				 LCD_MOVE_CURSOR(2,1);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("C=0 ");
     c9c:	8b ee       	ldi	r24, 0xEB	; 235
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
				 LCD_MOVE_CURSOR(2,12);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	6c e0       	ldi	r22, 0x0C	; 12
     ca8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("D=0 ");
     cac:	80 ef       	ldi	r24, 0xF0	; 240
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCD_SEND_STRING>
				 LCD_MOVE_CURSOR(1,1);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_MOVE_CURSOR>
				 LCD_clear_screen();
     cbc:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_clear_screen>
				 break;
     cc0:	d3 cd       	rjmp	.-1114   	; 0x868 <__stack+0x9>
			}
			while(u8Button_read('C',4)==1);
     cc2:	83 e4       	ldi	r24, 0x43	; 67
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	0e 94 4d 00 	call	0x9a	; 0x9a <u8Button_read>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	d1 f3       	breq	.-12     	; 0xcc2 <__stack+0x463>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	91 ee       	ldi	r25, 0xE1	; 225
     cd2:	a4 e0       	ldi	r26, 0x04	; 4
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	90 40       	sbci	r25, 0x00	; 0
     cd8:	a0 40       	sbci	r26, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <__stack+0x475>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <__stack+0x47f>
     cde:	00 00       	nop
     ce0:	f3 ce       	rjmp	.-538    	; 0xac8 <__stack+0x269>

00000ce2 <keypad_vinit>:
#include "keybad.h"
void keypad_vinit(void)
{
	vDIO_SET_BIT_DIR(keybad_port,0,1);
     ce2:	84 e4       	ldi	r24, 0x44	; 68
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,1,1);
     cec:	84 e4       	ldi	r24, 0x44	; 68
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,2,1);
     cf6:	84 e4       	ldi	r24, 0x44	; 68
     cf8:	62 e0       	ldi	r22, 0x02	; 2
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,3,1);
     d00:	84 e4       	ldi	r24, 0x44	; 68
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,4,0);
     d0a:	84 e4       	ldi	r24, 0x44	; 68
     d0c:	64 e0       	ldi	r22, 0x04	; 4
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,5,0);
     d14:	84 e4       	ldi	r24, 0x44	; 68
     d16:	65 e0       	ldi	r22, 0x05	; 5
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,6,0);
     d1e:	84 e4       	ldi	r24, 0x44	; 68
     d20:	66 e0       	ldi	r22, 0x06	; 6
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,7,0);
     d28:	84 e4       	ldi	r24, 0x44	; 68
     d2a:	67 e0       	ldi	r22, 0x07	; 7
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
     d32:	84 e4       	ldi	r24, 0x44	; 68
     d34:	64 e0       	ldi	r22, 0x04	; 4
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
     d3c:	84 e4       	ldi	r24, 0x44	; 68
     d3e:	65 e0       	ldi	r22, 0x05	; 5
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
     d46:	84 e4       	ldi	r24, 0x44	; 68
     d48:	66 e0       	ldi	r22, 0x06	; 6
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
     d50:	84 e4       	ldi	r24, 0x44	; 68
     d52:	67 e0       	ldi	r22, 0x07	; 7
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
}
     d5a:	08 95       	ret

00000d5c <keybad_u8read_press>:
char keybad_u8read_press()
{
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	60 97       	sbiw	r28, 0x10	; 16
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     d74:	de 01       	movw	r26, r28
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	e5 ef       	ldi	r30, 0xF5	; 245
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 e1       	ldi	r24, 0x10	; 16
     d7e:	01 90       	ld	r0, Z+
     d80:	0d 92       	st	X+, r0
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	e1 f7       	brne	.-8      	; 0xd7e <keybad_u8read_press+0x22>
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     d86:	00 e0       	ldi	r16, 0x00	; 0
	{
		vDIO_WRITE_BIT(keybad_port,0,1);
     d88:	84 e4       	ldi	r24, 0x44	; 68
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,1,1);
     d92:	84 e4       	ldi	r24, 0x44	; 68
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,2,1);
     d9c:	84 e4       	ldi	r24, 0x44	; 68
     d9e:	62 e0       	ldi	r22, 0x02	; 2
     da0:	41 e0       	ldi	r20, 0x01	; 1
     da2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,3,1);
     da6:	84 e4       	ldi	r24, 0x44	; 68
     da8:	63 e0       	ldi	r22, 0x03	; 3
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,row,0);
     db0:	84 e4       	ldi	r24, 0x44	; 68
     db2:	60 2f       	mov	r22, r16
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		for (colum=0;colum<4;colum++)
     dba:	10 e0       	ldi	r17, 0x00	; 0
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
}
char keybad_u8read_press()
     dbc:	61 2f       	mov	r22, r17
     dbe:	6c 5f       	subi	r22, 0xFC	; 252
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
		{
		val=u8DIO_READ_BIT(keybad_port,(colum+4));
     dc0:	84 e4       	ldi	r24, 0x44	; 68
     dc2:	0e 94 bf 01 	call	0x37e	; 0x37e <u8DIO_READ_BIT>
		    if(val==0)
     dc6:	88 23       	and	r24, r24
     dc8:	61 f4       	brne	.+24     	; 0xde2 <keybad_u8read_press+0x86>
			{
			returnval=arr[row][colum];
     dca:	e0 2f       	mov	r30, r16
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e1 0f       	add	r30, r17
     dd8:	f1 1d       	adc	r31, r1
     dda:	ec 0f       	add	r30, r28
     ddc:	fd 1f       	adc	r31, r29
     dde:	81 81       	ldd	r24, Z+1	; 0x01
     de0:	04 c0       	rjmp	.+8      	; 0xdea <keybad_u8read_press+0x8e>
		vDIO_WRITE_BIT(keybad_port,0,1);
		vDIO_WRITE_BIT(keybad_port,1,1);
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
     de2:	1f 5f       	subi	r17, 0xFF	; 255
     de4:	14 30       	cpi	r17, 0x04	; 4
     de6:	51 f7       	brne	.-44     	; 0xdbc <keybad_u8read_press+0x60>
     de8:	0b c0       	rjmp	.+22     	; 0xe00 <keybad_u8read_press+0xa4>
		{
		break;
		}
	}
	return returnval;
     dea:	60 96       	adiw	r28, 0x10	; 16
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret
char keybad_u8read_press()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     e00:	0f 5f       	subi	r16, 0xFF	; 255
     e02:	04 30       	cpi	r16, 0x04	; 4
     e04:	09 f6       	brne	.-126    	; 0xd88 <keybad_u8read_press+0x2c>
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	f0 cf       	rjmp	.-32     	; 0xdea <keybad_u8read_press+0x8e>

00000e0a <LCD_ENABLE>:
	#endif

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_CONTROL,EN,1);
     e0a:	82 e4       	ldi	r24, 0x42	; 66
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
     e14:	8f e9       	ldi	r24, 0x9F	; 159
     e16:	9f e0       	ldi	r25, 0x0F	; 15
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <LCD_ENABLE+0xe>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <LCD_ENABLE+0x14>
     e1e:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
     e20:	82 e4       	ldi	r24, 0x42	; 66
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
     e2a:	8f e9       	ldi	r24, 0x9F	; 159
     e2c:	9f e0       	ldi	r25, 0x0F	; 15
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCD_ENABLE+0x24>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <LCD_ENABLE+0x2a>
     e34:	00 00       	nop
	_delay_ms(2);
	
}
     e36:	08 95       	ret

00000e38 <LCD_SEND_CHAR>:
	
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
     e38:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
     e3a:	81 e4       	ldi	r24, 0x41	; 65
     e3c:	0e 94 42 02 	call	0x484	; 0x484 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
     e40:	82 e4       	ldi	r24, 0x42	; 66
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_ENABLE();
     e4a:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
	LCD_ENABLE();
	_delay_ms(1);
	#endif

}
     e4e:	08 95       	ret

00000e50 <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
     e50:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,cmd);
     e52:	81 e4       	ldi	r24, 0x41	; 65
     e54:	0e 94 42 02 	call	0x484	; 0x484 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
     e58:	82 e4       	ldi	r24, 0x42	; 66
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_ENABLE();
     e62:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_ENABLE>
     e66:	8f ec       	ldi	r24, 0xCF	; 207
     e68:	97 e0       	ldi	r25, 0x07	; 7
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <LCD_SEND_CMD+0x1a>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <LCD_SEND_CMD+0x20>
     e70:	00 00       	nop
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#endif
	
}
     e72:	08 95       	ret

00000e74 <LCD_INIT>:
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	91 ee       	ldi	r25, 0xE1	; 225
     e78:	a4 e0       	ldi	r26, 0x04	; 4
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	90 40       	sbci	r25, 0x00	; 0
     e7e:	a0 40       	sbci	r26, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <LCD_INIT+0x6>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <LCD_INIT+0x10>
     e84:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(200);
	#if defined eight_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,0,1);
     e86:	81 e4       	ldi	r24, 0x41	; 65
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,1,1);
     e90:	81 e4       	ldi	r24, 0x41	; 65
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,2,1);
     e9a:	81 e4       	ldi	r24, 0x41	; 65
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,3,1);
     ea4:	81 e4       	ldi	r24, 0x41	; 65
     ea6:	63 e0       	ldi	r22, 0x03	; 3
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
     eae:	81 e4       	ldi	r24, 0x41	; 65
     eb0:	64 e0       	ldi	r22, 0x04	; 4
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
     eb8:	81 e4       	ldi	r24, 0x41	; 65
     eba:	65 e0       	ldi	r22, 0x05	; 5
     ebc:	41 e0       	ldi	r20, 0x01	; 1
     ebe:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
     ec2:	81 e4       	ldi	r24, 0x41	; 65
     ec4:	66 e0       	ldi	r22, 0x06	; 6
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
     ecc:	81 e4       	ldi	r24, 0x41	; 65
     ece:	67 e0       	ldi	r22, 0x07	; 7
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,EN,1);
     ed6:	82 e4       	ldi	r24, 0x42	; 66
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,RS,1);
     ee0:	82 e4       	ldi	r24, 0x42	; 66
     ee2:	62 e0       	ldi	r22, 0x02	; 2
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,WR,1);
     eea:	82 e4       	ldi	r24, 0x42	; 66
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_CONTROL,WR,0);
     ef4:	82 e4       	ldi	r24, 0x42	; 66
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_SEND_CMD(EIGHT_BIT);
     efe:	88 e3       	ldi	r24, 0x38	; 56
     f00:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     f04:	af ec       	ldi	r26, 0xCF	; 207
     f06:	b7 e0       	ldi	r27, 0x07	; 7
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <LCD_INIT+0x94>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <LCD_INIT+0x9a>
     f0e:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
     f10:	8e e0       	ldi	r24, 0x0E	; 14
     f12:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     f16:	8f ec       	ldi	r24, 0xCF	; 207
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_INIT+0xa6>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <LCD_INIT+0xac>
     f20:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     f28:	af ec       	ldi	r26, 0xCF	; 207
     f2a:	b7 e0       	ldi	r27, 0x07	; 7
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <LCD_INIT+0xb8>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <LCD_INIT+0xbe>
     f32:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
     f34:	86 e0       	ldi	r24, 0x06	; 6
     f36:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     f3a:	8f ec       	ldi	r24, 0xCF	; 207
     f3c:	97 e0       	ldi	r25, 0x07	; 7
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCD_INIT+0xca>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <LCD_INIT+0xd0>
     f44:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	
	#endif
	
}
     f46:	08 95       	ret

00000f48 <LCD_clear_screen>:
	#endif
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     f4e:	8f e1       	ldi	r24, 0x1F	; 31
     f50:	9e e4       	ldi	r25, 0x4E	; 78
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <LCD_clear_screen+0xa>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <LCD_clear_screen+0x10>
     f58:	00 00       	nop
	_delay_ms(10);
}
     f5a:	08 95       	ret

00000f5c <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     f62:	88 81       	ld	r24, Y
     f64:	88 23       	and	r24, r24
     f66:	31 f0       	breq	.+12     	; 0xf74 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
     f68:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
     f6a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
     f6e:	89 91       	ld	r24, Y+
     f70:	88 23       	and	r24, r24
     f72:	d9 f7       	brne	.-10     	; 0xf6a <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
     f7a:	28 2f       	mov	r18, r24
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	70 f4       	brcc	.+28     	; 0xf9e <LCD_MOVE_CURSOR+0x24>
     f82:	61 31       	cpi	r22, 0x11	; 17
     f84:	70 f4       	brcc	.+28     	; 0xfa2 <LCD_MOVE_CURSOR+0x28>
     f86:	66 23       	and	r22, r22
     f88:	71 f0       	breq	.+28     	; 0xfa6 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	19 f4       	brne	.+6      	; 0xf94 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
     f8e:	96 2f       	mov	r25, r22
     f90:	91 58       	subi	r25, 0x81	; 129
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	41 f4       	brne	.+16     	; 0xfa8 <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
     f98:	96 2f       	mov	r25, r22
     f9a:	91 54       	subi	r25, 0x41	; 65
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
     f9e:	90 e8       	ldi	r25, 0x80	; 128
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <LCD_MOVE_CURSOR+0x2e>
     fa2:	90 e8       	ldi	r25, 0x80	; 128
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <LCD_MOVE_CURSOR+0x2e>
     fa6:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
     fa8:	89 2f       	mov	r24, r25
     faa:	0e 94 28 07 	call	0xe50	; 0xe50 <LCD_SEND_CMD>
     fae:	8f ec       	ldi	r24, 0xCF	; 207
     fb0:	97 e0       	ldi	r25, 0x07	; 7
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <LCD_MOVE_CURSOR+0x38>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <LCD_MOVE_CURSOR+0x3e>
     fb8:	00 00       	nop
	_delay_ms(1);	 
}
     fba:	08 95       	ret

00000fbc <compare_pass>:
uint8 compare_pass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 counter1 = 0;
	uint8 returnval = 1;
	
	while(counter1 < size)
     fbc:	44 23       	and	r20, r20
     fbe:	a1 f0       	breq	.+40     	; 0xfe8 <compare_pass+0x2c>
	{
		if(*(pass1+counter1) == *(pass2+counter1))
     fc0:	fc 01       	movw	r30, r24
     fc2:	30 81       	ld	r19, Z
     fc4:	fb 01       	movw	r30, r22
     fc6:	20 81       	ld	r18, Z
     fc8:	32 17       	cp	r19, r18
     fca:	81 f0       	breq	.+32     	; 0xfec <compare_pass+0x30>
#define F_CPU 8000000UL
#include <util/delay.h>
#include "menu.h"
extern volatile uint16 counter_timer;
extern uint8 timeout;
uint8 compare_pass(const uint8* pass1,const uint8* pass2,const uint8 size)
     fcc:	dc 01       	movw	r26, r24
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	31 96       	adiw	r30, 0x01	; 1
{
	uint8 counter1 = 0;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <compare_pass+0x22>
	uint8 returnval = 1;
	
	while(counter1 < size)
	{
		if(*(pass1+counter1) == *(pass2+counter1))
     fd6:	2d 91       	ld	r18, X+
     fd8:	91 91       	ld	r25, Z+
     fda:	29 17       	cp	r18, r25
     fdc:	49 f0       	breq	.+18     	; 0xff0 <compare_pass+0x34>
		{
		  returnval = 0;
		  break;	
		}
		counter1++;
     fde:	8f 5f       	subi	r24, 0xFF	; 255
uint8 compare_pass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 counter1 = 0;
	uint8 returnval = 1;
	
	while(counter1 < size)
     fe0:	84 17       	cp	r24, r20
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <compare_pass+0x1a>
extern volatile uint16 counter_timer;
extern uint8 timeout;
uint8 compare_pass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 counter1 = 0;
	uint8 returnval = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	08 95       	ret
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	08 95       	ret
	
	while(counter1 < size)
	{
		if(*(pass1+counter1) == *(pass2+counter1))
		{
		  returnval = 0;
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret
     ff0:	80 e0       	ldi	r24, 0x00	; 0
		}
		counter1++;
	}
	return returnval;
	
}
     ff2:	08 95       	ret

00000ff4 <__udivmodqi4>:
     ff4:	99 1b       	sub	r25, r25
     ff6:	79 e0       	ldi	r23, 0x09	; 9
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__udivmodqi4_ep>

00000ffa <__udivmodqi4_loop>:
     ffa:	99 1f       	adc	r25, r25
     ffc:	96 17       	cp	r25, r22
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <__udivmodqi4_ep>
    1000:	96 1b       	sub	r25, r22

00001002 <__udivmodqi4_ep>:
    1002:	88 1f       	adc	r24, r24
    1004:	7a 95       	dec	r23
    1006:	c9 f7       	brne	.-14     	; 0xffa <__udivmodqi4_loop>
    1008:	80 95       	com	r24
    100a:	08 95       	ret

0000100c <_exit>:
    100c:	f8 94       	cli

0000100e <__stop_program>:
    100e:	ff cf       	rjmp	.-2      	; 0x100e <__stop_program>
